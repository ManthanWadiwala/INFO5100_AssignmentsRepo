/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;



import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Fleet;
import model.FleetHistory;

/**
 *
 * @author manth
 */
public class FilterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FilterJPanel
     */
    FleetHistory history;
    //timeStamp timeStamp;
    public FilterJPanel(FleetHistory history) {
        initComponents();
        
        this.history = history; 
        //this.timeStamp=timeStamp;
        populateOriginalTable();
        //labelLastUpdated.setText(timeStamp);
        
        boolean flag=false;
        jPanelFilter.setVisible(flag);
        jPanelManufacturer.setVisible(flag);
        
        
                       DefaultTableModel model = (DefaultTableModel) tblFilter.getModel(); 
                       DefaultTableModel model1 = (DefaultTableModel) tblManufacturer.getModel(); 
                       //flag=false;
                       //jPanel1.setVisible(flag);
                       int a= 0;
                       int na =0;
                       int rowCount = tblFilter.getRowCount();
                        for (int i = 0; i < rowCount; i++) {
                        String rowEntry = tblFilter.getValueAt(i, 7).toString();
                        //System.out.println(rowEntry);
                        if (rowEntry.equalsIgnoreCase("true")) {
                            labelAvlbCars.setText(Integer.toString(++a));
                        }
                        else
                        {
                           labelAvlbCars.setText(Integer.toString(a)); 
                        }
                        if (rowEntry.equalsIgnoreCase("false")) {
                            labelNACars.setText(Integer.toString(++na));
                        }
                        else
                        {
                            labelNACars.setText(Integer.toString(na));
                        }
                    }
                        
                        List<Date> date = new ArrayList<Date>();
                        DateFormat formatter = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
                        formatter.setLenient(false);
                         for(Fleet f : history.getHistory())
                         {                                             
                                try {
                                    String updateTimeStamp=f.getUpdateTimestamp();
                                    Date date1= formatter.parse(updateTimeStamp);
                                    date.add(date1);
                                    //System.out.println(updateTimeStamp);
                                }
                                //labelLastUpdated.setText(t.getTimeStamp());
                                catch (Exception ex) {
                                    
                                }
 
                         }
                         
                         final Date maxDate = date.stream().max(Date::compareTo).get();
                         labelLastUpdated.setText((maxDate).toString());
                         
                        
    
                        
                        
                
                        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtMake = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtManufactureYear = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSeatsMin = new javax.swing.JTextField();
        txtSeatsMax = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtVIN = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtModel = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        cbFirstCar = new java.awt.Checkbox();
        cbCarManufacturers = new java.awt.Checkbox();
        cbExpiredMaintenance = new java.awt.Checkbox();
        jPanelManufacturer = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblManufacturer = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        labelAvlbCars = new javax.swing.JLabel();
        labelNACars = new javax.swing.JLabel();
        labelLastUpdated = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanelFilter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFilter = new javax.swing.JTable();
        btnSearch2 = new javax.swing.JButton();

        btnSearch.setText("Clear");
        btnSearch.setActionCommand("");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Cars Available");

        txtMake.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMakeKeyPressed(evt);
            }
        });

        jLabel2.setText("Cars by Make");

        jLabel3.setText("Cars by Manufacture Year");

        txtManufactureYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufactureYearActionPerformed(evt);
            }
        });
        txtManufactureYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtManufactureYearKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Filter Data");

        jLabel7.setText("No. of Seats");

        txtSeatsMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSeatsMinActionPerformed(evt);
            }
        });
        txtSeatsMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSeatsMinKeyPressed(evt);
            }
        });

        txtSeatsMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSeatsMaxActionPerformed(evt);
            }
        });
        txtSeatsMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSeatsMaxKeyPressed(evt);
            }
        });

        jLabel8.setText("min.");

        jLabel9.setText("max.");

        jLabel10.setText("Car by VIN");

        txtVIN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVINKeyPressed(evt);
            }
        });

        jLabel11.setText("Cars by Model");

        txtModel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtModelKeyPressed(evt);
            }
        });

        jLabel12.setText("Cars by City");

        txtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCityKeyTyped(evt);
            }
        });

        cbFirstCar.setLabel("First Available Car");
        cbFirstCar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbFirstCarMouseClicked(evt);
            }
        });

        cbCarManufacturers.setLabel("List all Car Manufacturers");

        cbExpiredMaintenance.setLabel("Cars with Expired Maintenance");
        cbExpiredMaintenance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbExpiredMaintenanceMouseClicked(evt);
            }
        });

        tblManufacturer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Make"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblManufacturer);

        javax.swing.GroupLayout jPanelManufacturerLayout = new javax.swing.GroupLayout(jPanelManufacturer);
        jPanelManufacturer.setLayout(jPanelManufacturerLayout);
        jPanelManufacturerLayout.setHorizontalGroup(
            jPanelManufacturerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelManufacturerLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelManufacturerLayout.setVerticalGroup(
            jPanelManufacturerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelManufacturerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(167, 167, 167))
        );

        jLabel4.setText("Cars Not Available");

        labelAvlbCars.setText("Cars Available");

        labelNACars.setText("Cars N/A");

        labelLastUpdated.setText("Date");
        labelLastUpdated.setToolTipText("");

        jLabel15.setText("Fleet Catalog Last Updated on:");

        tblFilter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Manufacture Year", "Make", "Model", "Seats", "VIN", "Car Location", "Maintenance Due", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFilter);

        javax.swing.GroupLayout jPanelFilterLayout = new javax.swing.GroupLayout(jPanelFilter);
        jPanelFilter.setLayout(jPanelFilterLayout);
        jPanelFilterLayout.setHorizontalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFilterLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanelFilterLayout.setVerticalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnSearch2.setText("Search");
        btnSearch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearch2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtVIN, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtMake, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(171, 171, 171))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 155, Short.MAX_VALUE)
                                        .addComponent(btnSearch2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAvlbCars, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelNACars, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbExpiredMaintenance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSeatsMin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSeatsMax, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbFirstCar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCarManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(339, 339, 339)
                        .addComponent(jLabel6)))
                .addGap(0, 399, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel12, jLabel2, jLabel3});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCity, txtMake, txtManufactureYear});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel4});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {labelAvlbCars, labelNACars});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSearch, btnSearch2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel6)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtSeatsMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7)
                                            .addComponent(txtSeatsMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10)
                                            .addComponent(txtVIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel11)
                                            .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(cbFirstCar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(cbCarManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(cbExpiredMaintenance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearch)
                        .addComponent(btnSearch2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanelManufacturer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(labelAvlbCars))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(labelNACars))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(labelLastUpdated))))
                        .addGap(33, 33, 33)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jPanelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        DefaultTableModel model = (DefaultTableModel) tblFilter.getModel(); 
        DefaultTableModel model1 = (DefaultTableModel) tblManufacturer.getModel(); 
        model1.setRowCount(0);
        model.setRowCount(0);
        jPanelManufacturer.setVisible(false);
        jPanelFilter.setVisible(false);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtManufactureYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufactureYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufactureYearActionPerformed

    private void txtSeatsMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSeatsMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSeatsMinActionPerformed

    private void txtSeatsMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSeatsMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSeatsMaxActionPerformed

    private void txtVINKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVINKeyPressed
  
            //txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
    }//GEN-LAST:event_txtVINKeyPressed

    private void btnSearch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearch2ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
       boolean flag=false;

        ArrayList<Fleet> tempList = new ArrayList<Fleet>();
        
        DefaultTableModel model = (DefaultTableModel) tblFilter.getModel(); 
        model.setRowCount(0);
 
          
        // Fetch Car by VIN        
        if(!txtVIN.getText().isEmpty())
        {
            flag=true;
            jPanelFilter.setVisible(flag);

                                for(Fleet f : history.getHistory())
                                {
                                    if(f.getVIN().equals(txtVIN.getText()))
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                        }
                                    }                                      
                                }
                                populateTable(tempList);             
        }
        
        // Fetch Car by Model
        if(!txtModel.getText().isEmpty())
        {
            flag=true;
            jPanelFilter.setVisible(flag);
            //DefaultTableModel model = (DefaultTableModel) tblFilter.getModel(); 
            model.setRowCount(0);
                                for(Fleet f : history.getHistory())
                                {
                                    if(f.getModel().equals(txtModel.getText()))
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                        }
                                    }                                                                   
                                }
                                populateTable(tempList);               
        }
        
        // Fetch Car by City
        if(!txtCity.getText().isEmpty())
        {
            flag=true;
            jPanelFilter.setVisible(flag);
            //DefaultTableModel model2 = (DefaultTableModel) tblFilter.getModel();
            model.setRowCount(0);
                                for(Fleet f : history.getHistory())
                                {
                                    if(f.getLocation().equals(txtCity.getText()))
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                        }
                                    }                                      
                                }
                                populateTable(tempList);               
        }
        
        // check car by Make
        if(!txtMake.getText().isEmpty())
        {
            flag=true;
            jPanelFilter.setVisible(flag);
            //DefaultTableModel model3 = (DefaultTableModel) tblFilter.getModel();
            model.setRowCount(0);
                                for(Fleet f : history.getHistory())
                                {
                                    if(f.getMake().equals(txtMake.getText()))
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                        }                                     
                                    }
                                                                       
                                }
                                populateTable(tempList);              
        }
        
  
        //Cars by manufacture year       
        if(!txtManufactureYear.getText().isEmpty())
        {
            flag=true;
            jPanelFilter.setVisible(flag);
            //DefaultTableModel model4 = (DefaultTableModel) tblFilter.getModel();
            model.setRowCount(0);
                                for(Fleet f : history.getHistory())
                                {
                                    if(f.getManufactureYear() == Integer.parseInt(txtManufactureYear.getText()))
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                        }
                                        
                                    }
                                                                       
                                }
                                populateTable(tempList);               
        }
        
        // fetch cars by seats
        if(!txtSeatsMin.getText().isEmpty() && !txtSeatsMax.getText().isEmpty())
        {
            flag=true;
            jPanelFilter.setVisible(flag);
            //DefaultTableModel model = (DefaultTableModel) tblFilter.getModel();
            model.setRowCount(0);
                               
            
                                for(Fleet f : history.getHistory())
                                {
                                    int minSeats= Integer.parseInt(txtSeatsMin.getText());
                                    int maxSeats= Integer.parseInt(txtSeatsMax.getText());
                                    if(minSeats <= f.getSeats() && maxSeats == f.getSeats())
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                        }
                                        
                                    }
                                                                       
                                }
                                populateTable(tempList);
        }
        
   
     // Check if the first car is available
     boolean checked1=cbFirstCar.getState();
//   DefaultTableModel model6 = (DefaultTableModel) tblFilter.getModel();
     
     flag=true;
            jPanelFilter.setVisible(flag);
                    if(checked1)
                    {
                        model.setRowCount(0);
                        for(Fleet f : history.getHistory())
                                {
                                    if("Available".equals(f.getAvailability()))
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                            break;
                                        }                                     
                                    }                                                                      
                                }
                                populateTable(tempList); 
                    }
                    
                    

        //list all car manufacturers
        boolean checked2=cbCarManufacturers.getState();
        if(checked2)
        {
                flag = true;
                jPanelManufacturer.setVisible(flag);
                //jPanelFilter.setVisible(false);
                
                ArrayList<String> manufacturers = new ArrayList<String>();
                for(Fleet f : history.getHistory())
                {                                             
                      manufacturers.add(f.getMake());  
                }
                
                Set<String> set = new LinkedHashSet<String>(manufacturers);
                
                DefaultTableModel model1 = (DefaultTableModel) tblManufacturer.getModel(); 
                model1.setRowCount(0);
                
                for(String s: set)
                {
                    Object[] row = new Object[8];
                    row[0] = s;
                    model1.addRow(row);
                }
                //removeDuplicates(); 
        }
        
      
        // list cars with expired maintenance certificate
 
        boolean checked3 = cbExpiredMaintenance.getState();
        //DefaultTableModel model = (DefaultTableModel) tblFilter.getModel();
        
        if(checked3)
        {
            model.setRowCount(0);
            flag=true;
            jPanelFilter.setVisible(flag);
                try{
                DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                Date today = new Date();
                for(Fleet f : history.getHistory())
                                {
                                    String maintenanceDate = f.getMaintenanceDate();
                                    
                                    Date date= formatter.parse(maintenanceDate);                                   
                                    if(today.compareTo(date) >= 0)
                                    {
                                        if(!tempList.contains(f))
                                        {
                                            tempList.add(f);
                                        }
                                    }                                                                      
                                }
                                populateTable(tempList);
                            
                
                }
                catch(ParseException e)
                {
                   e.printStackTrace();
                }
               //removeDuplicates();  
        }
       
       
   
        
   
    }//GEN-LAST:event_btnSearch2ActionPerformed

    private void txtSeatsMaxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSeatsMaxKeyPressed
        // TODO add your handling code here:
        txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            //txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            //txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            //txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
        
    }//GEN-LAST:event_txtSeatsMaxKeyPressed

    private void cbFirstCarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbFirstCarMouseClicked
        // TODO add your handling code here:
            txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            //cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
            
        
        
    }//GEN-LAST:event_cbFirstCarMouseClicked

    private void txtModelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModelKeyPressed
        // TODO add your handling code here:
            txtVIN.setText("");
            //txtVIN.setEditable(false);
            //txtModel.setText("");
            //txtModel.setEditable(false);
            txtCity.setText("");
            //txtCity.setEditable(false);
            //txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
    }//GEN-LAST:event_txtModelKeyPressed

    private void txtCityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCityKeyTyped
        // TODO add your handling code here:
        
            txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            //txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
    }//GEN-LAST:event_txtCityKeyTyped

    private void txtMakeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMakeKeyPressed
        // TODO add your handling code here:
            txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            //txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
        
    }//GEN-LAST:event_txtMakeKeyPressed

    private void txtManufactureYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManufactureYearKeyPressed
        // TODO add your handling code here:
        
            txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            //txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            //txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
    }//GEN-LAST:event_txtManufactureYearKeyPressed

    private void txtSeatsMinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSeatsMinKeyPressed
        // TODO add your handling code here
        txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            //txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            //txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
    }//GEN-LAST:event_txtSeatsMinKeyPressed

    private void cbExpiredMaintenanceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbExpiredMaintenanceMouseClicked
        // TODO add your handling code here:
        txtVIN.setText("");
            //txtVIN.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            //txtCity.setText("");
            //txtCity.setEditable(false);
            txtModel.setText("");
            //txtModel.setEditable(false);
            txtMake.setText("");
            //txtMake.setEditable(false);
            txtManufactureYear.setText("");
            //txtManufactureYear.setEditable(false);
            txtSeatsMin.setText("");
            //txtSeatsMin.setEditable(false);
            txtSeatsMax.setText("");
            //txtSeatsMax.setEditable(false);
            cbFirstCar.setState(false);
            //cbFirstCar.setEnabled(false);
            //cbCarManufacturers.setState(false);
            //cbCarManufacturers.setEnabled(false);
            //cbExpiredMaintenance.setState(false);
            //cbExpiredMaintenance.setEnabled(false);
    }//GEN-LAST:event_cbExpiredMaintenanceMouseClicked
  
            private void populateTable(ArrayList<Fleet> tempList) {
        DefaultTableModel model = (DefaultTableModel) tblFilter.getModel();
        model.setRowCount(0);
     
        for(Fleet f:tempList)
        {
            
            Object[] row = new Object[8];
            row[0] = f.getManufactureYear();
            row[1] = f.getMake();
            row[2] = f.getModel();
            row[3] = f.getSeats();
            row[4] = f.getVIN();
            row[5] = f.getLocation();
            row[6] = f.getMaintenanceDate();
            boolean available = f.getAvailability().equals("Available");
            row[7] = available;                    
            model.addRow(row);
        }
        
       
    }
            
            private void populateOriginalTable()
            {
                DefaultTableModel model = (DefaultTableModel) tblFilter.getModel();
                model.setRowCount(0);

                for(Fleet f : history.getHistory())
                {

                    Object[] row = new Object[8];
                    row[0] = f.getManufactureYear();
                    row[1] = f.getMake();
                    row[2] = f.getModel();
                    row[3] = f.getSeats();
                    row[4] = f.getVIN();
                    row[5] = f.getLocation();
                    row[6] = f.getMaintenanceDate();
                    boolean available = f.getAvailability().equals("Available");
                    row[7] = available;                    
                    model.addRow(row);
        }
        
            }
                    
            
 
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearch2;
    private java.awt.Checkbox cbCarManufacturers;
    private java.awt.Checkbox cbExpiredMaintenance;
    private java.awt.Checkbox cbFirstCar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelFilter;
    private javax.swing.JPanel jPanelManufacturer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAvlbCars;
    private javax.swing.JLabel labelLastUpdated;
    private javax.swing.JLabel labelNACars;
    private javax.swing.JTable tblFilter;
    private javax.swing.JTable tblManufacturer;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtMake;
    private javax.swing.JTextField txtManufactureYear;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtSeatsMax;
    private javax.swing.JTextField txtSeatsMin;
    private javax.swing.JTextField txtVIN;
    // End of variables declaration//GEN-END:variables
}
