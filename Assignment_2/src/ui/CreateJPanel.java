/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.security.Timestamp;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import model.Fleet;
import model.FleetHistory;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author manth
 */
public class CreateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateJPanel
     */
    
    FleetHistory history;
    //timeStamp timeStamp;
    
    public CreateJPanel(FleetHistory history) {
        initComponents();
        
        this.history = history;
        
        
    }

    CreateJPanel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMake = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtModel = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtManufactureYear = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtVIN = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMaintenanceDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtSeats = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        cbAvailability = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Enter New Fleet Details");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Car Make");

        txtMake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMakeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Car Model");

        txtModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Manufacture Year");

        txtManufactureYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufactureYearActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("VIN");

        txtVIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVINActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Car Location (City)");

        txtLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocationActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Maintenance Due (mm/dd/yyyy)");

        txtMaintenanceDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaintenanceDateActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Availbility");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("No. of Seats");

        txtSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSeatsActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        cbAvailability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Not Available" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(404, 404, 404)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtVIN, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMake, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMaintenanceDate, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(303, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(517, 517, 517)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(551, 551, 551)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReset)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel9});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel7, jLabel8});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnReset, btnSave});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbAvailability, txtLocation, txtMaintenanceDate, txtMake, txtManufactureYear, txtModel, txtSeats, txtVIN});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtVIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtMaintenanceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cbAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnReset))
                .addContainerGap(283, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtMakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMakeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMakeActionPerformed

    private void txtModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelActionPerformed

    private void txtManufactureYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufactureYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufactureYearActionPerformed

    private void txtVINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVINActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVINActionPerformed

    private void txtLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLocationActionPerformed

    private void txtMaintenanceDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaintenanceDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaintenanceDateActionPerformed

    private void txtSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSeatsActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
     
        //++id;
        
        String errorMessage="";
        

        //Make Field
        if(txtMake.getText().isEmpty())
            {
               errorMessage = errorMessage.concat("Make is missing. \n");
            }
            else
            {
                    String make = txtMake.getText();
                    if(!make.matches("^[a-zA-Z\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("Make should only contain letters. \n");
                    }
                    else
                    {
                       //f.setMake(make);
                        int makeFlag = 1; 
                    }                             
            }
        
        // Model Field
            if(txtModel.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Model is missing. \n");
            }
            else
            {
                    String model = txtModel.getText();
                    if(!model.matches("^[a-zA-Z0-9\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("Model should only contain letters and numbers. \n");
                    }
                    else
                    {
                       //f.setModel(model);
                        int modelFlag = 1;
                    }  
            }
            
            
          // Manufacture Year
            if(txtManufactureYear.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Manufacture year is missing. \n");
            }
            else
            {
                try{
                    int manufactureYear = Integer.parseInt(txtManufactureYear.getText());
                    int year = Calendar.getInstance().get(Calendar.YEAR);
                    if(manufactureYear > year)
                    {
                        errorMessage = errorMessage.concat("Manufacture Year cannot be greater than current year. \n");
                    }
                    else
                    {
                       //f.setManufactureYear(manufactureYear);
                        int manufactureYearFlag = 1;
                    }  
                }
                catch(Exception e)
                {
                   errorMessage = errorMessage.concat("Invalid Manufacture Year. \n");
                }
            }
            
            // Seats
            
            if(txtSeats.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Seats is missing. \n");
            }
            else
            {       

                    if(!txtSeats.getText().matches("^[0-9]*$"))
                    {    
                        errorMessage = errorMessage.concat("Seats should only contain numbers. \n");                    
                    }
                    else
                    {
                        int seats = Integer.parseInt(txtSeats.getText());
                        //f.setSeats(seats);
                        int seatsFlag=1;
                    }
                    
            }
            
            // VIN
            if(txtVIN.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("VIN is missing. \n");
            }
            else
            {
                    String VIN = txtVIN.getText();
                    if(!VIN.matches("^[a-zA-Z0-9\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("VIN should only contain letters and numbers. \n");
                    }
                    else
                    {
                       for(Fleet fl : history.getHistory())
                       {
                           if(fl.getVIN()==(VIN))
                           {
                               errorMessage = errorMessage.concat("Car with given VIN already exists. \n");
                               //break;
                           }
                           else
                           {
                               //f.setVIN(VIN);
                               int vinFlag=1;
                           }
                       }
  
                    }  
            }
            
            //Location
            if(txtLocation.getText().isEmpty())
            {
               errorMessage = errorMessage.concat("Location is missing. \n");
            }
            else
            {
                    String location = txtLocation.getText();
                    if(!location.matches("^[a-zA-Z\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("Location should only contain letters. \n");
                    }
                    else
                    {
                       //f.setLocation(location);
                        
                    }                             
            }
            
            // Maintenance Date
            
            if(txtMaintenanceDate.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Maintenance Date is missing. \n");
            }
            else
            {
                String maintenanceDate = txtMaintenanceDate.getText();
                DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                formatter.setLenient(false);
                try 
                {
                        Date date= formatter.parse(maintenanceDate);
                        //f.setMaintenanceDate(maintenanceDate);
                        int setMaintenanceDateFlag=1;


                } catch (Exception e) 
                {
                    errorMessage = errorMessage.concat("Invalid Maintenance Date. \n");

                }
            }
  
        //System.out.println(timeStamp);
        //System.out.println(f.getUpdateTimestamp());
        
            if(errorMessage != null && !errorMessage.isEmpty()){
                JOptionPane.showMessageDialog(this, errorMessage);
                
            }
            else
            {
                
                Fleet f = history.addNewFleet();
                f.setMake(txtMake.getText());
                f.setModel(txtModel.getText());
                f.setManufactureYear(Integer.parseInt(txtManufactureYear.getText()));
                f.setSeats(Integer.parseInt(txtSeats.getText()));
                f.setVIN(txtVIN.getText());
                f.setLocation(txtLocation.getText());
                f.setMaintenanceDate(txtMaintenanceDate.getText());
                String availability = (cbAvailability.getSelectedItem().toString());
                f.setAvailability(availability);


                //TimeStamp
                String timeStamp = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss").format(new Date());
                f.setUpdateTimestamp(timeStamp);
                JOptionPane.showMessageDialog(this,"Fleet details added.");
                txtMake.setText("");
                txtModel.setText("");
                txtManufactureYear.setText("");
                txtSeats.setText("");
                txtVIN.setText("");
                txtLocation.setText("");
                txtMaintenanceDate.setText("");
                cbAvailability.setSelectedItem("");
                //t.setTimeStamp();
                //System.out.println(t.getTimeStamp());
            }

        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        
        txtMake.setText("");
        txtModel.setText("");
        txtManufactureYear.setText("");
        txtSeats.setText("");
        txtVIN.setText("");
        txtLocation.setText("");
        txtMaintenanceDate.setText("");
        cbAvailability.setSelectedItem("");
    }//GEN-LAST:event_btnResetActionPerformed

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbAvailability;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtMaintenanceDate;
    private javax.swing.JTextField txtMake;
    private javax.swing.JTextField txtManufactureYear;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtSeats;
    private javax.swing.JTextField txtVIN;
    // End of variables declaration//GEN-END:variables
}
