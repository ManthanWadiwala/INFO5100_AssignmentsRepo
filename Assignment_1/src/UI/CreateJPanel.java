/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Profile.Person;
import java.awt.Image;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author manth
 */
public class CreateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateJPanel
     */
    Person person;
    public CreateJPanel(Person person) {
        initComponents();
        
        this.person = person;
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        lblCreateTitle = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblCountry = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblTelephone1 = new javax.swing.JLabel();
        lblFaxNo = new javax.swing.JLabel();
        lblEmail1 = new javax.swing.JLabel();
        lblSSN = new javax.swing.JLabel();
        lblMRN = new javax.swing.JLabel();
        lblHealthNo = new javax.swing.JLabel();
        lblBankAC1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtDOB = new javax.swing.JTextField();
        txtMobileNo = new javax.swing.JTextField();
        txtFaxNo = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtSSN = new javax.swing.JTextField();
        txtMRN = new javax.swing.JTextField();
        txtHealthNo = new javax.swing.JTextField();
        txtBankAC = new javax.swing.JTextField();
        lblLicenseNo = new javax.swing.JLabel();
        txtLicenseNo = new javax.swing.JTextField();
        lbVehicleIdNo = new javax.swing.JLabel();
        txtVehicleIdNo = new javax.swing.JTextField();
        lblVehiclePlateNo = new javax.swing.JLabel();
        txtVehiclePlateNo = new javax.swing.JTextField();
        lblDevideIDNo = new javax.swing.JLabel();
        txtDeviceIdNo = new javax.swing.JTextField();
        lblDeviceSerialNo = new javax.swing.JLabel();
        txtDeviceSerialNo = new javax.swing.JTextField();
        lblLinkedin = new javax.swing.JLabel();
        txtLinkedin = new javax.swing.JTextField();
        lblIPAddress = new javax.swing.JLabel();
        txtIPAddress = new javax.swing.JTextField();
        lblUIN = new javax.swing.JLabel();
        txtUIN = new javax.swing.JTextField();
        btnSelectFile = new javax.swing.JButton();
        cbCountry = new javax.swing.JComboBox<>();
        lblName1 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblName2 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblName3 = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        lblUploadPhoto = new javax.swing.JLabel();
        lblPhotoPreview = new javax.swing.JLabel();
        lblZipCode = new javax.swing.JLabel();
        txtZipCode = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblImagePath = new javax.swing.JLabel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        setMinimumSize(new java.awt.Dimension(700, 700));

        lblCreateTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCreateTitle.setText("Create Profile");

        lblName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblName.setText("Name");

        lblCountry.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCountry.setText("Country");

        lblDOB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDOB.setText("Date of Birth (mm/dd/yyyy)");

        lblTelephone1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTelephone1.setText("Mobile No. (10-digits)");

        lblFaxNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblFaxNo.setText("Fax No. (upto 10-digits)");

        lblEmail1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblEmail1.setText("Email");

        lblSSN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSSN.setText("SSN No. (9-digits)");

        lblMRN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblMRN.setText("Medical Record No.");

        lblHealthNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHealthNo.setText("Health Plan Beneficiary No.");

        lblBankAC1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblBankAC1.setText("Bank A/C No.");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtName.setToolTipText("");
        txtName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtNameMouseClicked(evt);
            }
        });
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtDOB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtMobileNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtFaxNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtSSN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtMRN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtHealthNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtBankAC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblLicenseNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblLicenseNo.setText("License No.");

        txtLicenseNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lbVehicleIdNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbVehicleIdNo.setText("Vehicle Identification No.");

        txtVehicleIdNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblVehiclePlateNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblVehiclePlateNo.setText("Vehicle License Plate No.");

        txtVehiclePlateNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblDevideIDNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDevideIDNo.setText("Device Identification No.");

        txtDeviceIdNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblDeviceSerialNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDeviceSerialNo.setText("Device Serial No.");

        txtDeviceSerialNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblLinkedin.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblLinkedin.setText("Linkedin URL (with http prefix)");

        txtLinkedin.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtLinkedin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLinkedinActionPerformed(evt);
            }
        });

        lblIPAddress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblIPAddress.setText("IP Address");

        txtIPAddress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblUIN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUIN.setText("Unique Identification No.");

        txtUIN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnSelectFile.setText("Select File");
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });

        cbCountry.setModel(new javax.swing.DefaultComboBoxModel(getCountries()));
        cbCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCountryActionPerformed(evt);
            }
        });

        lblName1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblName1.setText("Address");

        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblName2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblName2.setText("City");

        txtCity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblName3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblName3.setText("State");

        txtState.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblUploadPhoto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUploadPhoto.setText("Upload Photo");

        lblPhotoPreview.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblZipCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblZipCode.setText("Zip Code");

        txtZipCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnSave.setText("Save");
        btnSave.setMaximumSize(new java.awt.Dimension(65, 23));
        btnSave.setMinimumSize(new java.awt.Dimension(65, 23));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Reset");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(364, 364, 364)
                .addComponent(lblCreateTitle)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFaxNo, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSSN)
                    .addComponent(lblMRN)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblCountry)
                        .addComponent(lblTelephone1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblName)
                    .addComponent(lblName1)
                    .addComponent(lblName2)
                    .addComponent(lblName3)
                    .addComponent(lblZipCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFaxNo, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtState)
                        .addComponent(txtName)
                        .addComponent(txtAddress)
                        .addComponent(txtCity)
                        .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUploadPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSelectFile)
                            .addComponent(lblPhotoPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbVehicleIdNo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtVehicleIdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLicenseNo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtLicenseNo, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblBankAC1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtBankAC, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(lblHealthNo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblVehiclePlateNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHealthNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtVehiclePlateNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLinkedin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtLinkedin, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblIPAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUIN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtUIN, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDevideIDNo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDeviceIdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDeviceSerialNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDeviceSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(95, 95, 95))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(358, 358, 358)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCreateTitle)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblName)
                                .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblHealthNo, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName1)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBankAC1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName2)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLicenseNo))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblZipCode)
                            .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtHealthNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBankAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtLicenseNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtVehicleIdNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbVehicleIdNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblVehiclePlateNo)
                            .addComponent(txtVehiclePlateNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCountry)
                            .addComponent(cbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDOB)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTelephone1)
                            .addComponent(txtMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFaxNo)
                            .addComponent(txtFaxNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmail1)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSSN)
                            .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMRN)
                            .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancel)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(96, 96, 96))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDeviceIdNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDevideIDNo))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDeviceSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDeviceSerialNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLinkedin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLinkedin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIPAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUIN)
                            .addComponent(txtUIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUploadPhoto)
                            .addComponent(btnSelectFile))
                        .addGap(18, 18, 18)
                        .addComponent(lblPhotoPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed
     
            // TODO add your handling code here:
        
      // Image      
        
        JFileChooser image = new JFileChooser();
        image.addChoosableFileFilter(new FileNameExtensionFilter("Images", ImageIO.getReaderFileSuffixes()));
        image.setAcceptAllFileFilterUsed(false);
        image.setFileHidingEnabled(false);
        if (image.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
           java.io.File file = image.getSelectedFile();
           lblImagePath.setText(file.getPath());
           person.setPhoto(file.getPath());                 
          lblPhotoPreview.setIcon(new ImageIcon(new ImageIcon(file.getPath()).getImage().getScaledInstance(110, 110, Image.SCALE_SMOOTH)));
          
}
        
    }//GEN-LAST:event_btnSelectFileActionPerformed

    private void cbCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCountryActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNameMouseClicked
        // TODO add your handling code here:
      
    }//GEN-LAST:event_txtNameMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
                // TODO add your handling code here:
                  String errorMessage="";
        
            // Name Field
            if(txtName.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Name is missing. \n");
            }
            else
            {
                    String name = txtName.getText();
                    if(!name.matches("^[a-zA-Z\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("Name should only contain letters. \n");
                    }
                    else
                    {
                       person.setName(txtName.getText());
                    }                             
            }
          
            // Address Field
            if(txtAddress.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Address is missing. \n");
            }
            else
            {
                    String name = txtAddress.getText();
                    if(!name.matches("^[a-zA-Z0-9\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("Address should only contain letters and numbers. \n");
                    }
                    else
                    {
                       person.setAddress(txtAddress.getText());
                    }  
            } 
                 
            // City Field
            if(txtCity.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("City is missing. \n");
            }
            else
            {     
                    String name = txtCity.getText();
                    if(!name.matches("^[a-zA-Z\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("City name should only contain alphabets. \n");
                    }
                    else
                    {
                        person.setCity(txtCity.getText());
                    }                 
            }
            
            // Zip Code
            if(txtZipCode.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Zip Code is missing. \n");
            }
            else
            {     
                    //String name = t.getText();
                    if(!txtZipCode.getText().matches("^[0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Zip Code should only contain numbers. \n");
                    }
                    else
                    {
                        person.setZipCode(txtZipCode.getText());
                    }                 
            }
            
            
            //State Field
            if(txtState.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("State is missing. \n");
            }
            else
            {

                    String name = txtState.getText();
                    if(!name.matches("^[a-zA-Z\\s]*$"))
                    {
                        errorMessage = errorMessage.concat("State should only contain alphabets. \n");
                    }
                    else
                    {
                       person.setState(txtState.getText());
                    }           

            }
            
            //Country Field           
            person.setCountry(cbCountry.getSelectedItem().toString());
            
            //date of birth field
            
            if(txtDOB.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Date of Birth is missing. \n");
            }
            else
            {
                DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                formatter.setLenient(false);
                try 
                {
                        Date date= formatter.parse(txtDOB.getText());
                        Date today = new Date();
                        System.out.println(today.compareTo(date)); 

                        if(today.compareTo(date) <= 0)
                        {
                            errorMessage = errorMessage.concat("Date of birth cannot be later than current date. \n");
                        }
                        else
                        {
                            person.setDate(txtDOB.getText());
                        }


                } catch (ParseException e) 
                {
                    errorMessage = errorMessage.concat("Invalid Date. \n");

                }
            }
            
            // Mobile No. Field
            if(txtMobileNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Mobile No. is missing. \n");
            }
            else
            {      
                            String mobileNo = txtMobileNo.getText();
                           
                            if(mobileNo.matches("^[0-9]*$"))
                            {
                                int mobileNoCount = (mobileNo.length());
                                if(mobileNoCount != 10)
                                {
                                    errorMessage = errorMessage.concat("Mobile No. should contain 10 digits. \n"); 
                                }
                                else 
                                {
                                    person.setMobile(mobileNo); 
                                }
                            }
                            else
                            {
                                errorMessage = errorMessage.concat("Mobile No. should only contain numbers. \n");
                            }
            }
            
            // Fax No. Field
            if(txtFaxNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Fax No. is missing. \n");
            }
            else
            {      
                            String faxNo = txtFaxNo.getText(); 
                            if(faxNo.matches("^[0-9]*$"))
                            {
                                int faxNoCount = faxNo.length();                          
                                if(faxNoCount >10)
                                {
                                    errorMessage = errorMessage.concat("Fax no. should not be greater than 10 digits. \n"); 
                                }
                                else
                                {
                                    person.setFax(txtFaxNo.getText());
                                }  
                            }
                            else
                            {
                                errorMessage = errorMessage.concat("Fax No. should only contain numbers. \n");
                            }

            }
            
            
            // Email Address validation
            if(txtEmail.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Email is missing. \n");
            }
            else
            {
                if(isValidEmail(txtEmail.getText()))
                {
                    person.setEmail(txtEmail.getText());
                }
                else
                {
                    errorMessage = errorMessage.concat("Email is invalid. \n");
                }
                
            }
            
            // SSN No. Validation
            if(txtSSN.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("SSN No. is missing. \n");
            }
            else
            {      
                    try
                    {
                            int ssnNoCount = (txtSSN.getText().length());
                            
                            if(ssnNoCount !=9)
                            {
                                errorMessage = errorMessage.concat("SSN no. should contain 9 digits. \n"); 
                            }
                            else
                            {
                                person.setSsn(txtSSN.getText());
                            }                          
                    }
                    catch (NumberFormatException e){
                        errorMessage = errorMessage.concat("SSN No. is invalid \n");
                    }
            }
            
            // Medical Record No. Validation
            if(txtMRN.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Medical Record Field is missing. \n");
            }
            else
            {
                
                    String name = txtMRN.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Medical Record No. should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setMedicalRecordNo(txtMRN.getText());
                    }
                                             
            }
            
            // Health Plan No.
            if(txtHealthNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Health Plan Beneficiary No. is missing. \n");
            }
            else
            {
                
                    String name = txtMRN.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Health Plan Beneficiary should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setHealthPlanNo(txtHealthNo.getText());
                    }
                                             
            }
            
            // Bank Account No.
            if(txtBankAC.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Bank A/C No. is missing. \n");
            }
            else
            {       

                    if(!txtBankAC.getText().matches("^[0-9]*$"))
                    {    

                    errorMessage = errorMessage.concat("Bank A/C No. should only contain numbers. \n"); 
                    
                    }
                    else
                    {
                        person.setBankAcNo(txtBankAC.getText());
                    }
                    
            }
            
            // License No.
            if(txtLicenseNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("License No. is missing. \n");
            }
            else
            {               
                    String name = txtLicenseNo.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("License No. should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setLicenseNo(txtLicenseNo.getText());
                    }                                             
            }
            
            // Vehicle Id No.
            if(txtVehicleIdNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Vehicle Identification No. is missing. \n");
            }
            else
            {               
                    String name = txtVehicleIdNo.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Vehicle Identification No. should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setVin(txtVehicleIdNo.getText());
                    }                                             
            }
            
            // Vehicle License Plate No.
            if(txtVehiclePlateNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Vehicle License Plate No. is missing. \n");
            }
            else
            {               
                    String name = txtVehiclePlateNo.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Vehicle License Plate No. should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setVehicleLicensePlateNo(txtVehiclePlateNo.getText());
                    }                                             
            }
                        
            // Device Identifier 
            if(txtDeviceIdNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Device Identification No. is missing. \n");
            }
            else
            {               
                    String name = txtDeviceIdNo.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Device Identification No. should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setDeviceIdNo(txtDeviceIdNo.getText());
                    }                                             
            }
            
            
            // Device Serial No.
            if(txtDeviceSerialNo.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Device Serial No. is missing. \n");
            }
            else
            {               
                    String name = txtDeviceSerialNo.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Device Serial No. should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setDeviceSerialNo(txtDeviceSerialNo.getText());
                    }                                             
            }
            
            // LinkedIn Profile
            if(txtLinkedin.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Linkedin profile link is missing. \n");
            }
            else
            {    
                if(isValidUrl(txtLinkedin.getText()))
                {              
                    person.setLinkedinProfile(txtLinkedin.getText());                    
                }
                else
                {
                    errorMessage = errorMessage.concat("URL format for linkedin profile is invalid \n");
                }
            }
            
            
            // IP Address
            String ipAddress = txtIPAddress.getText();
 
            if(ipAddress.isEmpty())
            {
                  errorMessage = errorMessage.concat("IP Address is missing. \n");             
            }
            else
            {          
                if(isValidIPAddress(ipAddress)){

                   person.setIpAddress(ipAddress); 
                }
                else
                {
                   errorMessage = errorMessage.concat("Invalid IP Address. \n");
                }
                
                
            
            }
 
            // Unique Identification No Validation
            if(txtUIN.getText().isEmpty())
            {
                errorMessage = errorMessage.concat("Unique Identification No. is missing. \n");
            }
            else
            {               
                    String name = txtUIN.getText();
                    if(!name.matches("^[a-zA-Z0-9]*$"))
                    {
                        errorMessage = errorMessage.concat("Unique Identification No. should only contain letters and numbers. \n");
                    }
                    else
                    {
                        person.setUin(txtUIN.getText());
                    }                                             
            }
            

           
            // Display Success/Error message
            if(errorMessage != null && !errorMessage.isEmpty()){
                JOptionPane.showMessageDialog(this, errorMessage);
                
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Personal Information Saved Successfully");
            }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        
        txtName.setText("");
        txtAddress.setText("");
        txtCity.setText("");
        txtZipCode.setText("");
        txtState.setText("");
        txtDOB.setText("");
        txtMobileNo.setText("");
        txtFaxNo.setText("");
        txtEmail.setText("");
        txtSSN.setText("");
        txtMRN.setText("");
        txtHealthNo.setText("");
        txtBankAC.setText("");
        txtLicenseNo.setText("");
        txtVehicleIdNo.setText("");
        txtDeviceIdNo.setText("");
        txtDeviceSerialNo.setText("");
        txtLinkedin.setText("");
        txtIPAddress.setText("");
        txtUIN.setText("");
        lblPhotoPreview.setText("");
        lblPhotoPreview.setIcon(null);
        lblImagePath.setText("");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtLinkedinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLinkedinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLinkedinActionPerformed

    private final String[] countries = 
    {
        "United States", "Canada", "Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and/or Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Croatia (Hrvatska)", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecudaor", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "France, Metropolitan", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and Mc Donald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran (Islamic Republic of)", "Iraq", "Ireland", "Israel", "Italy", "Ivory Coast", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Korea, Democratic People's Republic of", "Korea, Republic of", "Kosovo", "Kuwait", "Kyrgyzstan", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Moldova, Republic of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfork Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia South Sandwich Islands", "South Sudan", "Spain", "Sri Lanka", "St. Helena", "St. Pierre and Miquelon", "Sudan", "Suriname", "Svalbarn and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan", "Tajikistan", "Tanzania, United Republic of", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States minor outlying islands", "Uruguay", "Uzbekistan", "Vanuatu", "Vatican City State", "Venezuela", "Vietnam", "Virigan Islands (British)", "Virgin Islands (U.S.)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Yugoslavia", "Zaire", "Zambia", "Zimbabwe"
    };
    
    public String[] getCountries()
    {
        return countries;
    }
    
    public static boolean isValidIPAddress(String ipAddress)
    {
 
     
        String ipAddr = "(\\d{1,2}|(0|1)\\" + "d{2}|2[0-4]\\d|25[0-5])";
 
        String regex = ipAddr + "\\." + ipAddr + "\\." + ipAddr + "\\." + ipAddr;

        Pattern p = Pattern.compile(regex);
 
        Matcher m = p.matcher(ipAddress);
        return m.matches();
    }
    
    public static boolean isValidEmail(String email) {
   String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
   return email.matches(regex);
}
    
    public static boolean isValidUrl(String profileLink) {
    try 
    {
        URL url = new URL(profileLink);
        url.toURI();
        return true;
    }
    catch (MalformedURLException | URISyntaxException e) 
    {
       return false;
    }
}
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JComboBox<String> cbCountry;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel lbVehicleIdNo;
    private javax.swing.JLabel lblBankAC1;
    private javax.swing.JLabel lblCountry;
    private javax.swing.JLabel lblCreateTitle;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDeviceSerialNo;
    private javax.swing.JLabel lblDevideIDNo;
    private javax.swing.JLabel lblEmail1;
    private javax.swing.JLabel lblFaxNo;
    private javax.swing.JLabel lblHealthNo;
    private javax.swing.JLabel lblIPAddress;
    private javax.swing.JLabel lblImagePath;
    private javax.swing.JLabel lblLicenseNo;
    private javax.swing.JLabel lblLinkedin;
    private javax.swing.JLabel lblMRN;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblPhotoPreview;
    private javax.swing.JLabel lblSSN;
    private javax.swing.JLabel lblTelephone1;
    private javax.swing.JLabel lblUIN;
    private javax.swing.JLabel lblUploadPhoto;
    private javax.swing.JLabel lblVehiclePlateNo;
    private javax.swing.JLabel lblZipCode;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBankAC;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtDeviceIdNo;
    private javax.swing.JTextField txtDeviceSerialNo;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFaxNo;
    private javax.swing.JTextField txtHealthNo;
    private javax.swing.JTextField txtIPAddress;
    private javax.swing.JTextField txtLicenseNo;
    private javax.swing.JTextField txtLinkedin;
    private javax.swing.JTextField txtMRN;
    private javax.swing.JTextField txtMobileNo;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtUIN;
    private javax.swing.JTextField txtVehicleIdNo;
    private javax.swing.JTextField txtVehiclePlateNo;
    private javax.swing.JTextField txtZipCode;
    // End of variables declaration//GEN-END:variables
}